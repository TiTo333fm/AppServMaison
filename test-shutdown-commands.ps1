# Test des commandes d'arr√™t/red√©marrage
# Script de diagnostic pour AppServMaison

Write-Host "===========================================" -ForegroundColor Cyan
Write-Host "    Test des commandes syst√®me" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan

# V√©rifier les privil√®ges administrateur
$currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
$principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
$isAdmin = $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

Write-Host "Utilisateur actuel: $($currentUser.Name)" -ForegroundColor Green
Write-Host "Privil√®ges admin: $isAdmin" -ForegroundColor $(if ($isAdmin) {"Green"} else {"Red"})
Write-Host ""

if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  Ce script doit √™tre ex√©cut√© en tant qu'administrateur pour tester les commandes d'arr√™t" -ForegroundColor Red
    Write-Host ""
}

# Test 1: V√©rifier si shutdown.exe est accessible
Write-Host "Test 1: V√©rification de shutdown.exe" -ForegroundColor Yellow
try {
    $shutdownPath = where.exe shutdown
    Write-Host "  ‚úÖ shutdown.exe trouv√©: $shutdownPath" -ForegroundColor Green
    
    # Tester l'aide de shutdown
    $shutdownHelp = shutdown.exe /? 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "  ‚úÖ shutdown.exe r√©pond correctement" -ForegroundColor Green
    } else {
        Write-Host "  ‚ùå shutdown.exe retourne une erreur (code: $LASTEXITCODE)" -ForegroundColor Red
    }
}
catch {
    Write-Host "  ‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 2: Test des diff√©rentes m√©thodes d'ex√©cution
Write-Host "Test 2: M√©thodes d'ex√©cution (TEST UNIQUEMENT - PAS D'ARR√äT R√âEL)" -ForegroundColor Yellow

if ($isAdmin) {
    Write-Host "  Test avec Invoke-Expression:" -ForegroundColor Cyan
    try {
        # Commande de test (liste les t√¢ches en cours d'arr√™t)
        $testCommand = "shutdown.exe /a"  # Annule les arr√™ts en cours (safe)
        Write-Host "    Commande: $testCommand" -ForegroundColor Gray
        Invoke-Expression $testCommand
        Write-Host "    ‚úÖ Invoke-Expression fonctionne" -ForegroundColor Green
    }
    catch {
        Write-Host "    ‚ùå Invoke-Expression: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host "  Test avec Start-Process:" -ForegroundColor Cyan
    try {
        $process = Start-Process "shutdown.exe" -ArgumentList "/a" -PassThru -Wait
        Write-Host "    ‚úÖ Start-Process fonctionne (code de sortie: $($process.ExitCode))" -ForegroundColor Green
    }
    catch {
        Write-Host "    ‚ùå Start-Process: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host "  Test avec cmd.exe:" -ForegroundColor Cyan
    try {
        $process = Start-Process "cmd.exe" -ArgumentList "/c", "shutdown.exe /a" -PassThru -Wait
        Write-Host "    ‚úÖ cmd.exe fonctionne (code de sortie: $($process.ExitCode))" -ForegroundColor Green
    }
    catch {
        Write-Host "    ‚ùå cmd.exe: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "  ‚ö†Ô∏è  Tests d'ex√©cution ignor√©s (privil√®ges administrateur requis)" -ForegroundColor Yellow
}

Write-Host ""

# Test 3: V√©rification des politiques de s√©curit√©
Write-Host "Test 3: Politiques de s√©curit√©" -ForegroundColor Yellow
try {
    $executionPolicy = Get-ExecutionPolicy
    Write-Host "  Politique d'ex√©cution PowerShell: $executionPolicy" -ForegroundColor Green
    
    if ($executionPolicy -eq "Restricted") {
        Write-Host "  ‚ö†Ô∏è  La politique Restricted peut bloquer certaines commandes" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "  ‚ùå Impossible de v√©rifier la politique: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 4: Variables d'environnement importantes
Write-Host "Test 4: Variables d'environnement" -ForegroundColor Yellow
$importantVars = @("PATH", "SYSTEMROOT", "WINDIR")
foreach ($var in $importantVars) {
    $value = [Environment]::GetEnvironmentVariable($var)
    if ($value) {
        Write-Host "  $var : $value" -ForegroundColor Green
    } else {
        Write-Host "  $var : NON D√âFINIE" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "===========================================" -ForegroundColor Cyan
Write-Host "Diagnostic termin√©" -ForegroundColor Green

if (-not $isAdmin) {
    Write-Host ""
    Write-Host "üí° Pour tester compl√®tement:" -ForegroundColor Yellow
    Write-Host "   1. Ex√©cutez ce script en tant qu'administrateur" -ForegroundColor White
    Write-Host "   2. V√©rifiez les logs du service API" -ForegroundColor White
    Write-Host "   3. Testez avec l'endpoint /api/test" -ForegroundColor White
}

Write-Host ""
Read-Host "Appuyez sur Entr√©e pour continuer"