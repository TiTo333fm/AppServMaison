# Test de connectivit√© directe vers SERVEUR333
# √Ä ex√©cuter depuis votre machine de d√©veloppement

$serverIp = "192.168.1.175"
$port = 8080

Write-Host "===========================================" -ForegroundColor Cyan
Write-Host "Test de connectivit√© vers SERVEUR333" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan

# Test 1: Ping basique
Write-Host "üîç Test 1: Ping vers le serveur..." -ForegroundColor Yellow
try {
    $ping = Test-Connection -ComputerName $serverIp -Count 2 -Quiet
    if ($ping) {
        Write-Host "‚úÖ Ping OK - Serveur accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Ping √âCHEC - Serveur inaccessible" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur ping: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 2: Port 8080
Write-Host "üîç Test 2: Connexion TCP sur port 8080..." -ForegroundColor Yellow
try {
    $tcpClient = New-Object System.Net.Sockets.TcpClient
    $connection = $tcpClient.BeginConnect($serverIp, $port, $null, $null)
    $wait = $connection.AsyncWaitHandle.WaitOne(3000, $false)
    
    if ($wait) {
        Write-Host "‚úÖ Port 8080 OUVERT - Connexion TCP r√©ussie" -ForegroundColor Green
        $tcpClient.Close()
    } else {
        Write-Host "‚ùå Port 8080 FERM√â - Timeout connexion TCP" -ForegroundColor Red
        $tcpClient.Close()
    }
} catch {
    Write-Host "‚ùå Erreur connexion TCP: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# Test 3: Requ√™te HTTP simple
Write-Host "üîç Test 3: Requ√™te HTTP vers l'API..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://$serverIp`:$port/api/status" -TimeoutSec 10 -UseBasicParsing
    Write-Host "‚úÖ HTTP OK - Status Code: $($response.StatusCode)" -ForegroundColor Green
    Write-Host "üìÑ Contenu de la r√©ponse:" -ForegroundColor White
    Write-Host $response.Content -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Erreur HTTP: $($_.Exception.Message)" -ForegroundColor Red
    
    # D√©tail de l'erreur
    if ($_.Exception.InnerException) {
        Write-Host "   D√©tail: $($_.Exception.InnerException.Message)" -ForegroundColor Red
    }
}

Write-Host ""

# Test 4: Telnet simulation
Write-Host "üîç Test 4: Test Telnet simulation..." -ForegroundColor Yellow
try {
    $socket = New-Object System.Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork, [System.Net.Sockets.SocketType]::Stream, [System.Net.Sockets.ProtocolType]::Tcp)
    $socket.SetSocketOption([System.Net.Sockets.SocketOptionLevel]::Socket, [System.Net.Sockets.SocketOptionName]::SendTimeout, 3000)
    $socket.SetSocketOption([System.Net.Sockets.SocketOptionLevel]::Socket, [System.Net.Sockets.SocketOptionName]::ReceiveTimeout, 3000)
    
    $endpoint = New-Object System.Net.IPEndPoint([System.Net.IPAddress]::Parse($serverIp), $port)
    $socket.Connect($endpoint)
    
    if ($socket.Connected) {
        Write-Host "‚úÖ Socket connexion R√âUSSIE" -ForegroundColor Green
        $socket.Close()
    } else {
        Write-Host "‚ùå Socket connexion √âCHOU√âE" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur socket: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "===========================================" -ForegroundColor Cyan
Write-Host "Diagnostic termin√©" -ForegroundColor Cyan
Write-Host "===========================================" -ForegroundColor Cyan

Read-Host "Appuyez sur Entr√©e pour continuer..."